https://youtu.be/QuvS_VLbGko
start.spring.io

Spring Web dependency

Spring data JDBC dependency

H2 Database dependency

Anotation

@PathVariable  String id
If there is any  {id} in GetMapping pass it into method as id


csb

number

icici 25000

b and v building 

Http Delete
(async function deletePhoto(id) {
          await fetch("http://localhost:8080/photoz/" + id, {
                    method: "DELETE"
          })
})("5")

Http Post
(async function createPhoto() {
          let photo = {"fileName": "hello.jpg"};

          await fetch("http://localhost:8080/photoz", {
                    method: "POST",
                    headers: {
                              "Accept": "application/json",
                              "Content-Type": "application/json"
                    },
                    body: JSON.stringify(photo)
                    })
                    .then(result => result.text())
                    .then(text => alert(text));
})();

@RequestBody Photo photo
Take whole json and convert to Photo class (Mark Annotation)

<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-validation</artifactId>
</dependency>

@RequestBody @Valid Photo photo
To check the photo object is valid

@NotEmpty
private String fileName;	
Should not be empty	

upload.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>


<h2>Photo Upload</h2>

<input id="fileupload" type="file" name="fileupload" />
<button id="upload-button" onclick="uploadFile()"> Upload </button>

<script>
    async function uploadFile() {
        let formData = new FormData();
        formData.append("data", fileupload.files[0]);
        await fetch('http://localhost:8080/photoz', {
            method: "POST",
            body: formData
        }).then(result =>    result.text())
            .then(text => alert(text));
    }
</script>
</body>
</html>

File upload - MultipartFile

@RequestPart("data") MultipartFile
Mark Annotation for MultipartFile
data tell the part to get the file from here

To increase size limit
spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=100MB

@JsonIgnore
prevent json conversion
will not return data

To show the picture as it is, we do refractor code

Dependency injection as database is not available to other classes, we create a Service class PhotozService
Inject the PhotozService inside PhotozController
To use the same instance of PhotozService 


ContentDisposition
To show/download image
download 
ContentDisposition build = ContentDisposition
                .builder("attachment")
                .filename(photo.getFileName())
                .build();
show
ContentDisposition build = ContentDisposition
                .builder("inline")
                .filename(photo.getFileName())
                .build();

We can save h2 database to a file to see it.
spring.datasource.url=jdbc:h2:file:~/springboot;AUTO_SERVER=TRUE;
save it in springboot folder in home folder i.e. C:\Users\albin

When boot up springboot - to check some tables or else it creates them
Flyaway	
Liquidbase

basic option
create src/main/resources/schema.sql

create table if not exists photoz (
    id bigint GENERATED BY DEFAULT AS IDENTITY primary key,
    file_name varchar(255),
    content_type varchar(255),
    data varbinary
);

To execute schema.sql always
spring.sql.init.mode=always

To enable h2 console mode 
spring.h2.console.enabled=true

open in browser
http://localhost:8080/h2-console/

Jdbc api
PhotozRepository extends CrudRepository
Generates sql statement for you.

Update the model class
converts column as camel case to underscore i.e. fileName as file_name

Maven - lifecycle - package
or
./mvnw clean package

/target
jar will be there

to run jar
java -jar .\photoz-clone-0.0.1-SNAPSHOT.jar